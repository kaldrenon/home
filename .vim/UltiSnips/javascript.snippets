extends 'haml.snippets'

snippet ect "event.currentTarget" i
$(event.currentTarget)
endsnippet

snippet clk "On click (js)" b
$(document).on('click', '$1', function(event){
  ${2:console.log("clicked $1");}
});
endsnippet


snippet // "comment header" b
//
// ${1:function header}
//
endsnippet

snippet targ "Set target var" !b
target = $(event.currentTarget);
endsnippet

snippet jqpost "jQuery $.post" !b
$.post(${1:href}, ${2:data}, function(${3:result}){
  ${4:# TODO: handle response from post}
});
endsnippet

snippet jqpatch "jQuery $.ajax with DELETE" !b
$.ajax({
  type: 'PATCH',
  url:  ${1:href},
  data: ${2:data},
  success: (${3:result}) ->
    ${4:# TODO: handle response from delete}
})
endsnippet

snippet jqdel "jQuery $.ajax with DELETE" !b
$.ajax({
  type: 'DELETE',
  url:  ${1:href},
  data: ${2:data},
  success: (${3:result}) ->
    ${4:# TODO: handle response from delete}
})
endsnippet

snippet data "Set up a data hash" !b
data = {
  $1
};
endsnippet

snippet forr "Range Comprehension (inclusive)" b
for ${1:name} in [${2:start}..${3:finish}]${4: by ${5:step}}
	${0:# body...}
endsnippet

snippet forrex "Range Comprehension (exclusive)" b
for ${1:name} in [${2:start}...${3:finish}]${4: by ${5:step}}
	${0:# body...}
endsnippet

snippet swi "Switch" b
switch ${1:object}
	when ${2:value}
		${0:# body...}
endsnippet

snippet cla "Class" b
class ${1:ClassName}${2: extends ${3:Ancestor}}

	${4:constructor: (${5:args}) ->
		${6:# body...}}
	$7
endsnippet

snippet try "Try .. Catch" b
try
	$1
catch ${2:error}
	$3
endsnippet

snippet req "Require" b
${1/^'?(\w+)'?$/\L$1\E/} = require(${1:'${2:sys}'})
endsnippet

snippet # "Interpolated Code"
#{$1}$0
endsnippet

snippet log "Log" b
console.log(${1:'${2:msg}'});
endsnippet

snippet info "Info" b
console.info(${1:'${2:msg}'});
endsnippet

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet get "Get Elements"
getElement${1/(T)|.*/(?1:s)/}By${1:T}${1/(T)|(I)|.*/(?1:agName)(?2:d)/}('$2')
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element){
	$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}){
	$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}:${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) ,,{
	${0:// body...}
};

endsnippet

snippet for "for (...) {...} (faster)"
for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2--){
	${3:$1[$2]}$0
};
endsnippet

snippet for "for (...) {...}"
for (var ${2:i}=0; $2 < ${1:Things}.length; $2++) {
	${3:$1[$2]}$0
};
endsnippet

snippet fun "function (fun)" i
function ${1:function_name }(${2:argument}) {
  ${0:// body...}
}
endsnippet

snippet fune "function (fun)" i
function ${1:function_name }() {
  ${0:// body...}
}
endsnippet

snippet funa "function (fun)" i
function($1) {
  ${2:// body...}
}
endsnippet

snippet funac "function (fun)" i
function($1) {
  ${2:// body...}
});
endsnippet

snippet ife "if ___ else"
if (${1:true}) {$0} else{};
endsnippet

snippet if "if"
if (${1:true}) {$0};
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {$0}${2:}, ${1:10});
endsnippet

# vim:ft=snippets:

snippet gt "gulp task" !b
gulp.task('${1:task}', function($2) {
  ${3:// TODO}
});
endsnippet
